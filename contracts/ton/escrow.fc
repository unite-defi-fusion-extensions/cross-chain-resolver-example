#include "stdlib.fc";
#include "error-codes.fc";
#include "helpers.fc";  ;; must contain: sha256_int256, buildSwap, parseSwap, sendJettonTransfer
                       ;; and OP_* constants if you keep them there

;; ================================================================
;; Persistent storage
;; ================================================================
global int   ctx_id;
global slice ctx_jetton_wallet;
global int   ctx_swap_counter;
global cell  ctx_swaps;
global cell  ctx_hashlock_map;
global int   ctx_initialized;

() load_data() impure {
    var ds = get_data().begin_parse();
    if (ds.slice_empty?()) {
        ctx_id            = 0;
        ctx_jetton_wallet = my_address();
        ctx_swap_counter  = 0;
        ctx_swaps         = new_dict();
        ctx_hashlock_map  = new_dict();
        ctx_initialized   = 0;
        return ();
    }
    ctx_id            = ds~load_uint(32);
    ctx_jetton_wallet = ds~load_msg_addr();
    ctx_swap_counter  = ds~load_uint(64);
    ctx_swaps         = ds~load_dict();
    ctx_hashlock_map  = ds~load_dict();
    ctx_initialized   = ds~load_uint(1);
    ds.end_parse();
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_id, 32)
            .store_slice(ctx_jetton_wallet)
            .store_uint(ctx_swap_counter, 64)
            .store_dict(ctx_swaps)
            .store_dict(ctx_hashlock_map)
            .store_uint(ctx_initialized, 1)
            .end_cell()
    );
}

;; ================================================================
;; Initialization
;; ================================================================
const int MAX_U32 = 4294967296;  ;; 2^32

() initialize_storage(slice in_msg_body) impure {
    load_data();
    throw_if(ERR_ALREADY_INITIALIZED, ctx_initialized);

    randomize_lt();
    ctx_id = random() % MAX_U32;  ;; clamp to 32-bit

    ctx_jetton_wallet = in_msg_body~load_msg_addr();
    ctx_swap_counter  = 0;
    ctx_swaps         = new_dict();
    ctx_hashlock_map  = new_dict();
    ctx_initialized   = 1;

    save_data();
}

;; ================================================================
;; Public getters
;; ================================================================
int get_id() method_id {
    load_data();
    return ctx_id;
}

int get_swap_counter() method_id {
    load_data();
    return ctx_swap_counter;
}

slice get_jetton_wallet() method_id {
    load_data();
    return ctx_jetton_wallet;
}

int is_initialized() method_id {
    load_data();
    return ctx_initialized;
}

int has_swap(int swapId) method_id {
    load_data();
    var (_, found) = ctx_swaps.udict_get?(256, swapId);
    return found ? 1 : 0;
}

(slice, slice, int, int, int, int) get_swap(int swapId) method_id {
    load_data();
    var (swapData, found) = ctx_swaps.udict_get?(256, swapId);
    throw_unless(ERR_SWAP_NOT_FOUND, found);
    return parseSwap(swapData);
}

(int, slice, slice, int, int, int, int) get_swap_by_hashlock(int hashlock) method_id {
    load_data();
    var (swapId_cs, found) = ctx_hashlock_map.udict_get?(256, hashlock);
    throw_unless(ERR_SWAP_NOT_FOUND, found);
    int swapId = swapId_cs.preload_uint(256);

    var (swapData, ok) = ctx_swaps.udict_get?(256, swapId);
    throw_unless(ERR_SWAP_NOT_FOUND, ok);

    var (initiator, recipient, tokenAmount, current_hashlock, timeLock, isCompleted) = parseSwap(swapData);
    return (swapId, initiator, recipient, tokenAmount, current_hashlock, timeLock, isCompleted);
}

;; ================================================================
;; State mutation helpers
;; ================================================================
() storeSwap(slice initiator, slice recipient, int tokenAmount, int hashLock, int timeLock) impure inline {
    builder b = buildSwap(initiator, recipient, tokenAmount, hashLock, timeLock, 0);
    ctx_swaps~udict_set(256, ctx_swap_counter, b.end_cell().begin_parse());

    ctx_hashlock_map~udict_set(
        256,
        hashLock,
        begin_cell().store_uint(ctx_swap_counter, 256).end_cell().begin_parse()
    );

    ctx_swap_counter = ctx_swap_counter + 1;
    save_data();
}

() refundSwap(slice in_msg_body, int msg_value) impure {
    load_data();
    throw_unless(ERR_NOT_INITIALIZED, ctx_initialized);

    int swapId = in_msg_body~load_uint(256);

    var (swapData, found) = ctx_swaps.udict_get?(256, swapId);
    throw_unless(ERR_SWAP_NOT_FOUND, found);

    var (initiator, recipient, tokenAmount, hashLock, timeLock, isCompleted) = parseSwap(swapData);
    throw_if(ERR_SWAP_ALREADY_COMPLETED_REFUND, isCompleted);

    int now_ts = now();
    throw_if(ERR_TIMELOCK_NOT_EXPIRED, now_ts < timeLock);

    builder upd = buildSwap(initiator, recipient, tokenAmount, hashLock, timeLock, 1);
    ctx_swaps~udict_set(256, swapId, upd.end_cell().begin_parse());

    sendJettonTransfer(ctx_jetton_wallet, initiator, tokenAmount, msg_value);
    save_data();
}

() completeSwap(slice in_msg_body, int msg_value) impure {
    load_data();
    throw_unless(ERR_NOT_INITIALIZED, ctx_initialized);

    int swapId   = in_msg_body~load_uint(256);
    int preimage = in_msg_body~load_uint(256);

    var (swapData, found) = ctx_swaps.udict_get?(256, swapId);
    throw_unless(ERR_SWAP_NOT_FOUND, found);

    var (initiator, recipient, tokenAmount, hashLock, timeLock, isCompleted) = parseSwap(swapData);
    throw_if(ERR_SWAP_COMPLETED, isCompleted);

    int calcHash = sha256_int256(preimage);  ;; from helpers.fc
    throw_unless(ERR_INVALID_PREIMAGE, calcHash == hashLock);
    throw_if(ERR_TIMELOCK_EXPIRED, now() >= timeLock);

    builder upd = buildSwap(initiator, recipient, tokenAmount, hashLock, timeLock, 1);
    ctx_swaps~udict_set(256, swapId, upd.end_cell().begin_parse());

    sendJettonTransfer(ctx_jetton_wallet, recipient, tokenAmount, msg_value);
    save_data();
}

() depositNotification(slice sender_address, slice in_msg_body, int amount) impure {
    load_data();
    throw_unless(ERR_NOT_INITIALIZED, ctx_initialized);

    ;; in_msg_body here is the FORWARD PAYLOAD slice (after OP)
    int depositAmount = in_msg_body~load_uint(128);
    throw_unless(ERR_INVALID_AMOUNT, depositAmount == amount);

    slice depositor = in_msg_body~load_msg_addr();

    throw_if(ERR_NO_REFS, in_msg_body.slice_refs() < 2);

    cell recipientRef = in_msg_body~load_ref();
    slice rs = recipientRef.begin_parse();
    slice recipient = rs~load_msg_addr();

    cell locksRef = in_msg_body~load_ref();
    slice ls = locksRef.begin_parse();
    int hashLock = ls~load_uint(256);
    int timeLock = ls~load_uint(64);

    storeSwap(depositor, recipient, depositAmount, hashLock, timeLock);
}

;; ================================================================
;; Entry point (fixed jetton notif parsing)
;; ================================================================
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    if (in_msg_body.slice_empty?()) {
        return ();
    }

    int op = in_msg_body~load_uint(32);

    if (op == OP_INITIALIZE) {
        initialize_storage(in_msg_body);
        return ();
    }

    load_data();
    throw_unless(ERR_NOT_INITIALIZED, ctx_initialized);

    if (op == OP_COMPLETE_SWAP) {
        completeSwap(in_msg_body, msg_value);
        return ();
    }

    if (op == OP_REFUND_SWAP) {
        refundSwap(in_msg_body, msg_value);
        return ();
    }
if (op == 0x7362d09c) { ;; JETTON_TRANSFER_NOTIFICATION
    int queryId     = in_msg_body~load_uint(64);
    int tokenAmount = in_msg_body~load_coins();
    slice from_addr = in_msg_body~load_msg_addr();

    ;; forward_payload : Either<slice, ref(Cell)>
    int is_ref = in_msg_body~load_uint(1);   ;; 0 = inline slice, 1 = ref cell
    slice f = null();
    if (is_ref == 1) {
        cell fwd = in_msg_body~load_ref();
        f = fwd.begin_parse();
    } else {
        ;; Remaining bits of in_msg_body are the forward slice
        f = in_msg_body;
    }

    throw_if(ERR_INSUFFICIENT_BITS, f.slice_bits() < 32);
    int f_op = f~load_uint(32);
    throw_unless(ERR_INVALID_FORWARD_OP, f_op == OP_DEPOSIT_NOTIFICATION);

    ;; f now at depositAmount
    depositNotification(from_addr, f, tokenAmount);
    return ();
}

}
